{"version":3,"sources":["components/Header/Header.js","components/CharactersList/index.js","components/CharactersList/CharactersList.js","components/TrackVisibility/index.js","components/TrackVisibility/TrackVisibility.js","components/Characters/Character/index.js","components/Characters/Character/Character.js","components/Characters/index.js","components/Characters/Characters.js","components/Main/index.js","components/Main/Main.js","components/Footer/index.js","components/Footer/Footer.js","App.js","serviceWorker.js","redux/reducers/characters.js","redux/reducers/index.js","redux/actions/index.js","index.js"],"names":["Header","useState","className","CharactersList","handleClick","characters","useSelector","state","activeCharacter","map","character","i","key","onClick","name","TrackVisibility","props","pageHeight","window","innerHeight","observerMargin","Math","floor","refs","onVisible","activeClass","useEffect","observer","IntersectionObserver","entries","forEach","entry","intersectionRatio","root","rootMargin","threshold","observe","current","disconnect","ref","children","Character","click","dispatch","useDispatch","type","payload","src","image","alt","house","ancestr","dateOfBirth","gender","eyeColour","hairColour","Characters","Main","reduce","refsObj","createRef","scrollIntoView","behavior","block","Footer","href","App","Boolean","location","hostname","match","initialState","reducers","combineReducers","action","getCharactersSuccess","getCharactersError","error","persistedState","localStorage","getItem","JSON","parse","store","createStore","applyMiddleware","thunk","axios","then","data","catch","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.8fdff398.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n// import {Link} \r\n\r\nimport './styles.scss'\r\n\r\n\r\nfunction Header()  {\r\n    const [links] = useState(['Meню', 'O нас', 'Контакты']);\r\n\r\n\r\n    return (\r\n        <header>\r\n            <div className='header_logo'>\r\n                <p className='text header_logo__text'>Harry Potter Section Navigation</p>\r\n            </div>\r\n        </header>\r\n    )\r\n    \r\n}\r\n\r\nexport default Header;","import CharactersList from './CharactersList';\r\nexport default CharactersList;","import React from 'react'\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport './styles.scss'\r\n\r\n\r\nconst CharactersList = ({ handleClick}) => {\r\n\r\n\r\n    const characters = useSelector(state =>state.characters.characters)\r\n    const activeCharacter = useSelector(state => state.characters.activeCharacter)\r\n\r\n    return (\r\n        <div className='characters-navigation'>\r\n            <ul className='characters-navigation__wrapper'>\r\n             {characters.map((character, i) =>\r\n              <li key={i} \r\n                  onClick={() => handleClick(character.name)} \r\n                  className={`text characters-navigation_link ${activeCharacter === character.name ? 'link--active' : ''}`}>\r\n                  {character.name}     </li>)}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default CharactersList;","import TrackVisibility from './TrackVisibility';\r\nexport default TrackVisibility;","import React, { useEffect } from 'react';\r\n\r\nimport './styles.scss';\r\n\r\nconst TrackVisibility = (props) => {\r\n  \r\n    const pageHeight = window.innerHeight;\r\n    const observerMargin = Math.floor(pageHeight / 2);\r\n  \r\n    const { name, refs, activeCharacter, onVisible } = props;\r\n    \r\n    const activeClass = activeCharacter === name ? 'characters-content--active' : ''; \r\n  \r\n    useEffect(() => {\r\n      const handleIntersection = function(entries) {\r\n          entries.forEach((entry) => {\r\n            if (entry.intersectionRatio * 100 > 0) {\r\n              onVisible(name)\r\n            }\r\n          });\r\n        };\r\n        const observer = new IntersectionObserver(\r\n          handleIntersection,\r\n          {\r\n            root: null,\r\n            rootMargin: `-${pageHeight % 2 === 0 ? observerMargin - 1 : observerMargin}px 0px -${observerMargin}px 0px`,\r\n            threshold: 0,\r\n       }\r\n        );\r\n        observer.observe(refs[name].current);\r\n        return () => observer.disconnect();\r\n      }, [ observerMargin, pageHeight, name, refs, activeCharacter, onVisible ]);\r\n\r\n        return (\r\n            <div className={`characters-content_section ${activeClass}`} ref={refs[name]}>{props.children}</div>\r\n        )\r\n}\r\n\r\nexport default TrackVisibility;","import Character from './Character';\r\nexport default Character;","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nimport TrackVisibility from '../../TrackVisibility';\r\nimport './styles.scss';\r\n\r\n\r\nconst Character = (props) => {\r\n\r\n    const {character, refs} = props;\r\n\r\n    const activeCharacter = useSelector(state => state.characters.activeCharacter);\r\n    const click = useSelector(state => state.characters.click)\r\n    const dispatch = useDispatch()\r\n\r\n    const onVisible = (name) => {\r\n        if(click && activeCharacter === name) {\r\n            dispatch({ type: 'SET_ACTIVE_CHARACTER', payload: {name: name, click: false} })\r\n        } else if(!click) {\r\n            dispatch({ type: 'SET_ACTIVE_CHARACTER', payload: {name: name, click: false} })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <TrackVisibility onVisible={onVisible}\r\n                         activeCharacter={activeCharacter} \r\n                         name={character.name} \r\n                         refs={refs}>\r\n            <div className='characters-content__character'>\r\n                <div className='character_column photo_block'>\r\n                    <div className='image photo_block'>\r\n                        <img src={`${character.image}`} alt={`${character.name}`} />\r\n                    </div>\r\n                    <h2 className='text photo_block'>{character.name}</h2>\r\n                </div>\r\n                <div className='character_column information_block'>\r\n                    <p className='text information_block__text'>House: {character.house}</p>\r\n                    <p className='text information_block__text'>Ancestry: {character.ancestr}</p>\r\n                    <p className='text information_block__text'>Date of Birth: {character.dateOfBirth} </p>\r\n                    <p className='text information_block__text'>Gender: {character.gender}</p>\r\n                    <p className='text information_block__text'>Eyes: {character.eyeColour}</p>\r\n                    <p className='text information_block__text'>Hair: {character.hairColour}</p>\r\n                </div>\r\n             </div>\r\n        </TrackVisibility>\r\n    )\r\n     \r\n}\r\n\r\nexport default Character;","import Characters from './Characters';\r\nexport default Characters;","import React from 'react';\r\n\r\n\r\nimport './styles.scss'\r\nimport Character from './Character'\r\n\r\n\r\nconst Characters = (props) => {\r\n\r\n    const { characters, refs } = props;\r\n\r\n    return (\r\n        <div className='characters-content'>\r\n           {characters.map((character, i) => <Character key={i} character={character} refs={refs}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Characters","import Main from './Main';\r\nexport default Main;","import React, {createRef} from 'react'\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nimport './styles.scss'\r\nimport CharactersList from '../CharactersList'\r\nimport Characters from '../Characters'\r\n\r\n\r\nconst Main = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const characters = useSelector(state =>state.characters.characters)\r\n    const refs = characters.reduce((refsObj, character) => {\r\n        refsObj[character.name] = createRef();\r\n        return refsObj;\r\n      }, {});\r\n\r\n      \r\n\r\n      const handleClick = (name) => {\r\n          dispatch({ type: 'SET_ACTIVE_CHARACTER', payload: {name: name, click: true} })\r\n          refs[name].current.scrollIntoView({\r\n          behavior: 'smooth',\r\n          block: 'center',\r\n        });\r\n      };\r\n    return (\r\n        <main>\r\n            <CharactersList handleClick={handleClick} characters={characters}/>\r\n            <Characters refs={refs} characters={characters} />\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Main;","import Footer from './Footer';\r\nexport default Footer;","import React from 'react';\r\n\r\n\r\nimport './styles.scss';\r\n\r\nconst Footer = () => {\r\n    return(\r\n        <footer>\r\n            <div className='footer_contacts'>\r\n                <a className='text footer_contacts__text' href='https://github.com/NatalieButr'>by  Natalie Butrim</a>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nimport './App.css';\r\nimport Header from './components/Header/Header';\r\nimport Main from './components/Main';\r\nimport Footer from './components/Footer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Header />\r\n        <Main />\r\n        <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initialState = {\r\n    characters: [],\r\n    activeCharacter: '',\r\n    click: false\r\n}\r\n\r\n\r\n\r\nexport default function reducers(state = initialState, action) {\r\n    switch(action.type)\r\n     {\r\n        case 'GET_CHARACTERS_SUCCESS':\r\n            return  {\r\n                ...state,\r\n                characters: action.payload,\r\n            };\r\n        case 'GET_CHARACTERS_ERROR':\r\n            return state;\r\n        case 'SET_ACTIVE_CHARACTER': \r\n            return {\r\n                ...state,\r\n                activeCharacter: action.payload.name,\r\n                click: action.payload.click,\r\n            }    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\n\r\nimport characters from './characters'\r\n\r\nconst reducers = combineReducers({\r\n    characters,\r\n})\r\n  \r\nexport default reducers;","import axios from 'axios';\r\n\r\n\r\n// get\r\nexport const getCharacters = () => dispatch => {\r\n  axios('https://hp-api.herokuapp.com/api/characters/students')\r\n    .then(({ data }) => dispatch(getCharactersSuccess(data)))\r\n    .catch(error => dispatch(getCharactersError(error)));\r\n}\r\n\r\nconst getCharactersSuccess  = characters  => ({ type: \"GET_CHARACTERS_SUCCESS\", payload: characters });\r\nconst getCharactersError    = error => ({ type: \"GET_CHARACTERS_ERROR\", payload: error });\r\n\r\n\r\nconst setActiveCharacter = character => ({type: 'SET_ACTIVE_CHARACTER', payload: character})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport reducers from './redux/reducers';\r\nimport {getCharacters} from './redux/actions'\r\n\r\nconst persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {};\r\n\r\nconst store = createStore(reducers, persistedState, applyMiddleware(thunk));\r\n\r\n// store.subscribe(()=>{\r\n//     localStorage.setItem('reduxState', JSON.stringify(store.getState()))\r\n// });\r\n\r\nstore.dispatch(getCharacters())\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}